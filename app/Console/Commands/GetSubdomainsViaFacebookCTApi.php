<?php

namespace App\Console\Commands;

use App\AdminNotice;
use App\Project;
use App\Task\BatchProcessSubdomainsFoundViaFacebookCT;
use Facebook\Facebook;
use Illuminate\Console\Command;

/**
 * Class GetSubdomainsViaFacebookCTApi
 * @package App\Console\Commands
 */
class GetSubdomainsViaFacebookCTApi extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'facebook:ctscan
    {--project=0 : Project ID}
    {--domain=0 : Domain without http(s) or slashes}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Use facebooks ct scan to get even more subdomains an targets!';

    /**
     * @var array
     */
    protected $subdomains = [];

    /**
     * @var array
     */
    protected $wildcards = [];

    /*
     *
     */
    protected $domain;

    /**
     * @var int
     */
    protected $limit = 2000;

    /**
     * @var Project
     */
    protected $project;

    /**
     * @var string
     */
    protected $token = "";

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * More info on this subject: https://developers.facebook.com/tools/ct
     *
     * @return mixed
     */
    public function handle()
    {

        list($projectId, $domain) = $this->getArguments();
        $this->validateArguments($projectId, $domain);

        $this->domain = $domain;
        $this->project = Project::findOrFail($projectId);

        $fb = new Facebook([
            'app_id'                => config('facebook.app_id'),
            'app_secret'            => config('facebook.app_secret'),
            'default_graph_version' => config('facebook.api_version'),
        ]);

        $this->token = config('facebook.app_id') . '|' . config('facebook.app_secret');

        try {
            $this->iterateThrouhPages(
                $fb,
                '/certificates?query=' . $this->domain . '&access_token=' . $this->token . '&fields=domains&limit=' . $this->limit
            );
        } catch (\Exception $e) {
            AdminNotice::create([
                'type'    => 'error',
                'context' => 'facebook:ctscan',
                'message' => $e->getMessage(),
            ]);
            $this->error($e->getMessage());
            exit();
        }


        $this->putCleanedWildcardDomainsAsSubdomainInArray();

        $this->line("Finished...");
        $this->line("Subdomains: " . count($this->subdomains));
        $this->line("Wildcards: " . count($this->wildcards));

        $this->importCTFRDataToDB();

        $message = "Process finished, report saved to database.";
        $this->info($message);

        AdminNotice::create([
            'type'    => 'success',
            'context' => 'facebook:ctscan',
            'message' => $message,
        ]);
    }


    /**
     * @return array
     */
    protected function getArguments(): array
    {
        $projectId = $this->option("project");
        $domain = $this->option("domain");

        return [$projectId, $domain];
    }

    /**
     * @param $projectId
     * @param $domain
     */
    protected function validateArguments(int $projectId, string $domain)
    {
        $message = "";
        $abort = false;

        if ($projectId <= 0) {
            $abort = true;
            $message = "projectId has to be bigger than 0";
        }

        if (strlen($domain) < 4) {
            $abort = true;
            $message = "domain not set or too small";
        }

        if (config('facebook.app_id') == "") {
            $abort = true;
            $message = "facebook.app_id not set";
        }

        if (config('facebook.app_secret') == "") {
            $abort = true;
            $message = "facebook.app_secret not set";
        }

        if ($abort) {
            $this->error($message);

            AdminNotice::create([
                'type'    => 'error',
                'context' => "facebook:ctscan",
                'message' => $message,
            ]);

            exit();

        }
    }

    /**
     * @param \Facebook\Facebook $fb
     * @param string             $url
     */
    private function iterateThrouhPages(Facebook $fb, string $url)
    {

        $this->line($url);
        $token = $fb->get($url);

        $body = json_decode($token->getBody(), true);

        $data = $body["data"];

        $subdomains = [];
        $wildcards = [];

        list($wildcards, $subdomains) = $this->iterateThroughElementPackages($data, $wildcards, $subdomains);

        $this->subdomains = array_merge($this->subdomains, $subdomains);
        $this->wildcards = array_merge($this->wildcards, $wildcards);

        if (!isset($body["paging"])) {
            return;
        }

        $paging = $body["paging"];

        if (isset($paging['cursors'], $paging['cursors']['after'])) {
            $url = '/certificates?query=' . $this->domain . '&access_token=' . $this->token . '&fields=domains&limit=' . $this->limit . '&after=' . $paging['cursors']['after'];
            $this->iterateThrouhPages($fb, $url);
        }


    }

    /**
     * @param array $data
     * @param array $wildcards
     * @param array $subdomains
     *
     * @return array
     */
    private function iterateThroughElementPackages(array $data, array $wildcards, array $subdomains): array
    {
        foreach ($data as $element) {
            if (isset($element['domains'])) {
                list($wildcards, $subdomains) = $this->iterateThroughDomains($wildcards, $subdomains, $element);
            }
        }

        return [$wildcards, $subdomains];
    }

    /**
     * @param array $wildcards
     * @param array $subdomains
     * @param array $element
     *
     * @return array
     */
    private function iterateThroughDomains(array $wildcards, array $subdomains, array $element): array
    {
        foreach ($element['domains'] as $domainFound) {

            if (strpos($domainFound, ".") === false) {
                continue;
            }

            if (strpos($domainFound, $this->domain) === false) {
                continue;
            }

            if (substr($domainFound, 0, 1) == "*") {
                $wildcards[] = $domainFound;
                continue;
            }

            $subdomains[] = $domainFound;
        }

        return [$wildcards, $subdomains];
    }

    /**
     *
     */
    private function putCleanedWildcardDomainsAsSubdomainInArray()
    {
        foreach ($this->wildcards as $wildcard) {
            $domain = substr($wildcard, 2);
            $this->subdomains[] = $domain;
        }
    }

    /**
     * @param string $outputPath
     */
    protected function importCTFRDataToDB(): void
    {
        $domainAdder = new BatchProcessSubdomainsFoundViaFacebookCT();
        $domainAdder->setProject($this->project);
        $domainAdder->start($this->subdomains, $this->wildcards);
    }
}
