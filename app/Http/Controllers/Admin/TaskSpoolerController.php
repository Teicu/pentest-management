<?php
/**
 * Author: Damian Schwyrz <mail@damianschwyrz.de>
 * URL: https://www.damianschwyrz.de
 * Copyright (c) 2018.
 */

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\System\TSPOutputParser;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\View\View;
use Symfony\Component\Process\Process;

class TaskSpoolerController extends Controller
{


    /**
     * @param \Illuminate\Http\Request $request
     *
     * @return \Illuminate\View\View
     */
    public function index(Request $request): View
    {
        return view('admin.tsp.index', [
            'siteTitle' => 'Taskspooler',
        ]);
    }

    /**
     * @param \Illuminate\Http\Request $request
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function getTSP(Request $request): JsonResponse
    {
        $process = new Process("tsp");
        $process->run();

        $output = $process->getOutput();

        $tspParser = new TSPOutputParser($output);
        $tspOutput = $tspParser->getResult();

        return response()->json([
            'output' => view('admin.tsp.parts.console-output', ['TSPdata' => $tspOutput])->render(),
        ]);
    }

    /**
     * @param string $output
     *
     * @return string
     */
    protected function AsciiEncodedChars(string $output): string
    {
        $output = str_replace("\n", "<br />", $output);
        $output = preg_replace("/\[(\d{1,2})m/i", "", $output); ## since some tools use colored output
        $output = str_replace("\e", "", $output);

        return $output;
    }

    /**
     * @param \Illuminate\Http\Request $request
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function getTSPTempfile(Request $request): JsonResponse
    {
        $this->validate($request, [
            'file' => 'required|string|min:6|max:255|regex:/^\/tmp\/ts-out\.[\w]*$/',
        ]);

        $tempFile = $request->input("file");

        $process = new Process("tail --lines=75 ".$tempFile);
        $process->run();
        $output = $process->getOutput();

        /**
         * Better idea?
         */
        $output = $this->AsciiEncodedChars($output);

        return response()->json([
            'output' => $output,
        ]);
    }

    /**
     * @param \Illuminate\Http\Request $request
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function clearTSP(Request $request): JsonResponse
    {
        $process = new Process("tsp -C");
        $process->run();

        return response()->json([
            'status' => true,
        ]);
    }

    /**
     * @param \Illuminate\Http\Request $request
     * @param int                      $id
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function deleteFromTSPQueue(Request $request, int $id): JsonResponse
    {

        $process = new Process("tsp -r " . $id);
        $process->run();

        return response()->json([
            'status' => true,
        ]);
    }
}
